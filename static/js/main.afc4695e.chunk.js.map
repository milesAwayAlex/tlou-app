{"version":3,"sources":["List.js","Homepage.js","Display.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","minHeight","wall","backgroundColor","palette","background","default","justifyContent","fixed","position","height","display","flexDirection","paddingInline","spacing","breakpoints","down","paddingBlockEnd","grayWall","paper","padding","alignItems","margin","marginTop","credits","paddingBlock","list","width","sectionHeader","paddingBlockStart","pageHeader","Item","props","button","sections","useState","showSections","setShow","itemId","item","_id","select","selected","types","includes","setSelected","filter","typeid","concat","indeterminate","chapSecIds","map","s","ListItemSecondaryAction","IconButton","edge","onClick","ExpandLess","ExpandMore","every","section","some","sectionid","forEach","push","Collapse","in","timeout","unmountOnExit","articles","ListItem","ListItemIcon","Checkbox","disableRipple","tabIndex","checked","color","ListItemText","primary","name","Category","title","classes","catName","allTypesSelected","catArray","type","Button","fullWidth","size","Box","className","Typography","component","variant","List","data","setData","gameName","game","apiUrl","api","useEffect","a","fetch","method","headers","body","JSON","stringify","response","json","console","error","getData","setFirstSection","res","log","cat","Object","hasOwnProperty","call","Grid","container","xs","sm","md","Paper","square","direction","setScreen","length","localStorage","removeItem","marginBlockEnd","Homepage","games","setGames","isMounted","fab","dark","grey","bottom","right","bottomDrawer","card","marginBlockStart","Card","collectedState","collected","CardHeader","subheader","titleTypographyProps","action","setCollected","entry","CardContent","description","Display","arts","setArts","drawerOpen","setDrawer","savedCollected","getItem","parse","setItem","getArticles","resetCollected","idArr","flatMap","article","id","setNextSection","chapter","Hidden","xsDown","smUp","implementation","Fab","MenuRounded","fontSize","Drawer","anchor","open","onClose","Divider","App","screen","darkTheme","createMuiTheme","amber","MuiGrid","justify","MuiButton","disableElevation","savedSelected","align","Link","underline","href","view","CssBaseline","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afc4695e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  List as Mlist,\n  ListItem,\n  ListItemIcon,\n  Checkbox,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n  Collapse,\n  Typography,\n} from '@material-ui/core';\nimport { ExpandLess, ExpandMore } from '@material-ui/icons';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '100vh',\n  },\n  wall: {\n    backgroundColor: theme.palette.background.default,\n    justifyContent: 'flex-start',\n  },\n  fixed: {\n    position: 'fixed',\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    paddingInline: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      position: 'static',\n      height: 'auto',\n      paddingBlockEnd: theme.spacing(3),\n      paddingInline: theme.spacing(2),\n    },\n  },\n  grayWall: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(3),\n    alignItems: 'flex-start',\n    [theme.breakpoints.down('xs')]: {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  credits: { paddingBlock: theme.spacing(3) },\n  list: {\n    width: '100%',\n  },\n  sectionHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n    paddingBlockStart: theme.spacing(3),\n  },\n  pageHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingBlock: theme.spacing(2),\n    paddingInline: theme.spacing(4),\n    [theme.breakpoints.down('sm')]: {\n      justifyContent: 'center',\n      paddingInline: 0,\n    },\n  },\n}));\n\n// the item to be displayed on the selection list\nfunction Item(props) {\n  // for chapters - whether to show sections or not\n  const [showSections, setShow] = useState(false);\n  const itemId = props.item._id;\n  let button;\n  let sections;\n  // for types - select or remove the type\n  let select = () => {\n    if (!props.selected.types.includes(itemId)) {\n      props.setSelected({\n        ...props.selected,\n        types: props.selected.types.concat(itemId),\n      });\n    } else {\n      props.setSelected({\n        ...props.selected,\n        types: props.selected.types.filter(typeid => typeid !== itemId),\n      });\n    }\n  };\n  let selected = props.selected.types.includes(itemId);\n  let indeterminate = false;\n\n  // chapters have different buttons\n  if (props.item.sections) {\n    const chapSecIds = props.item.sections.map(s => s._id);\n    // toggle sections display\n    button = (\n      <ListItemSecondaryAction>\n        <IconButton edge=\"end\" onClick={() => setShow(!showSections)}>\n          {showSections ? <ExpandLess /> : <ExpandMore />}\n        </IconButton>\n      </ListItemSecondaryAction>\n    );\n    // test if all sections of the chapter are selected\n    selected = chapSecIds.every(section =>\n      props.selected.sections.includes(section)\n    );\n    indeterminate = selected\n      ? false\n      : chapSecIds.some(section => props.selected.sections.includes(section));\n    select = () => {\n      if (!selected) {\n        // determine which sections need to be added to the selection\n        let sections = [];\n        chapSecIds.forEach(section => {\n          if (!props.selected.sections.includes(section)) {\n            sections.push(section);\n          }\n        });\n        // add the sections to the selection\n        props.setSelected({\n          ...props.selected,\n          sections: props.selected.sections.concat(sections),\n        });\n      } else {\n        // remove every section from the selection\n        props.setSelected({\n          ...props.selected,\n          sections: props.selected.sections.filter(\n            sectionid => !chapSecIds.includes(sectionid)\n          ),\n        });\n      }\n    };\n    // only generate sections for chapters\n    sections = (\n      <Collapse in={showSections} timeout=\"auto\" unmountOnExit>\n        <ul>\n          {props.item.sections.map(item => (\n            <Item\n              key={item._id}\n              item={item}\n              selected={props.selected}\n              setSelected={props.setSelected}\n            />\n          ))}\n        </ul>\n      </Collapse>\n    );\n  }\n\n  // sections have the third set of buttons\n  if (props.item.articles) {\n    select = () => {\n      // if the section is not selected - add it to the selection\n      if (!props.selected.sections.includes(itemId)) {\n        props.setSelected({\n          ...props.selected,\n          sections: props.selected.sections.concat(itemId),\n        });\n      } else {\n        // otherwise remove it\n        props.setSelected({\n          ...props.selected,\n          sections: props.selected.sections.filter(\n            sectionid => sectionid !== itemId\n          ),\n        });\n      }\n    };\n    selected = props.selected.sections.includes(itemId);\n  }\n\n  return (\n    <>\n      <ListItem\n        button\n        onClick={() => {\n          select();\n        }}\n      >\n        <ListItemIcon>\n          <Checkbox\n            edge=\"start\"\n            disableRipple\n            tabIndex={-1}\n            indeterminate={indeterminate}\n            checked={selected}\n            color=\"primary\"\n          />\n        </ListItemIcon>\n        <ListItemText primary={props.item.name} />\n        {button}\n      </ListItem>\n      {sections}\n    </>\n  );\n}\n\n// display chapters/types as a category\nfunction Category(props) {\n  const classes = useStyles();\n  let button;\n  let title;\n  // while displaying the types, add the 'Select All' button\n  if (props.catName === 'types') {\n    title = 'Select by Type';\n    // test allTypesSelected = if all types are selected\n    const allTypesSelected = props.catArray\n      .map(type => type._id)\n      .every(typeid => props.selected.types.includes(typeid));\n    // select/clear all types\n    // display button text contingent on allTypesSelected\n    button = (\n      <Button\n        color=\"default\"\n        fullWidth={false}\n        size=\"medium\"\n        onClick={() => {\n          if (allTypesSelected) {\n            props.setSelected({ ...props.selected, types: [] });\n          } else {\n            props.setSelected({\n              ...props.selected,\n              types: props.catArray.map(type => type._id),\n            });\n          }\n        }}\n      >\n        {allTypesSelected ? 'Clear All' : 'Select All'}\n      </Button>\n    );\n  }\n  // while displaying chapters, add the 'Clear All' button\n  if (props.catName === 'chapters') {\n    title = 'Select by Chapter';\n    // clear all sections\n    button = (\n      <Button\n        color=\"default\"\n        fullWidth={false}\n        size=\"medium\"\n        onClick={() => {\n          props.setSelected({ ...props.selected, sections: [] });\n        }}\n      >\n        Clear All\n      </Button>\n    );\n  }\n  const list = props.catArray.map(item => (\n    <Item\n      key={item._id}\n      item={item}\n      selected={props.selected}\n      setSelected={props.setSelected}\n    />\n  ));\n  return (\n    <>\n      <Box className={classes.sectionHeader}>\n        <Typography component=\"h2\" variant=\"h5\">\n          {title}\n        </Typography>\n        {button}\n      </Box>\n      <Mlist className={classes.list}>{list}</Mlist>\n    </>\n  );\n}\n\nfunction List(props) {\n  // fetched data\n  const [data, setData] = useState({});\n  const gameName = props.selected.game;\n  const apiUrl = props.api;\n  useEffect(() => {\n    async function getData() {\n      try {\n        const response = await fetch(apiUrl + '/select', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ game: gameName }),\n        });\n        const json = await response.json();\n        setData(json);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    getData();\n  }, [apiUrl, gameName]);\n  const classes = useStyles();\n\n  // function to set selected to section 1\n  const setFirstSection = async () => {\n    try {\n      const res = await fetch(apiUrl + '/next', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: '[]',\n      });\n      const json = await res.json();\n      props.setSelected({ ...props.selected, sections: [json._id] });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  let list = <Typography component=\"h2\">Loading..</Typography>;\n  // upon fetching the data\n  if (data) {\n    list = [];\n    for (const cat in data) {\n      // check if data has the category in it\n      if (Object.hasOwnProperty.call(data, cat)) {\n        // add the category to be displayed\n        list.push(\n          <Category\n            catName={cat}\n            catArray={data[cat]}\n            key={cat}\n            selected={props.selected}\n            setSelected={props.setSelected}\n          />\n        );\n      }\n    }\n  }\n  // display the list of categories and the button to go to the items\n  return (\n    <Grid\n      container\n      component=\"main\"\n      alignItems=\"stretch\"\n      className={classes.root}\n    >\n      <Grid\n        container\n        item\n        xs={12}\n        sm={8}\n        md={9}\n        component={Paper}\n        square\n        className={classes.grayWall}\n      >\n        <Grid item xs={12} className={classes.pageHeader}>\n          <Typography component=\"h1\" variant=\"h3\">\n            {props.selected.game}\n          </Typography>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {list[0]}\n        </Grid>\n        <Grid item xs={12} md={6}>\n          {list[1]}\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        direction=\"column\"\n        item\n        xs={12}\n        sm={4}\n        md={3}\n        className={classes.wall}\n      >\n        <Box className={classes.fixed}>\n          <Box></Box>\n          <Box>\n            <Button\n              className={classes.margin}\n              onClick={() => {\n                props.setScreen('home');\n              }}\n            >\n              Main Menu\n            </Button>\n            <Button\n              className={classes.margin}\n              onClick={() => {\n                if (!props.selected.types.length) {\n                  props.setSelected({\n                    ...props.selected,\n                    types: data.types.map(type => type._id),\n                  });\n                } else if (!props.selected.sections.length) {\n                  setFirstSection();\n                  props.setScreen('main');\n                } else {\n                  props.setScreen('main');\n                }\n              }}\n            >\n              Start\n            </Button>\n            <Button\n              className={classes.margin}\n              onClick={() => {\n                localStorage.removeItem('collected');\n              }}\n            >\n              Reset Collected\n            </Button>\n          </Box>\n          <Box className={classes.credits}>{props.credits}</Box>\n        </Box>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default List;\n","import {\n  Box,\n  Button,\n  Grid,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '100vh',\n  },\n  wall: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n    justifyContent: 'space-between',\n  },\n  grayWall: {\n    backgroundColor: theme.palette.background.paper,\n    [theme.breakpoints.down('xs')]: {\n      backgroundColor: theme.palette.background.default,\n    },\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n    [theme.breakpoints.down('xs')]: {\n      marginTop: 0,\n      marginBlockEnd: theme.spacing(2),\n    },\n  },\n}));\n\nfunction Homepage(props) {\n  const [games, setGames] = useState([]);\n  useEffect(() => {\n    // this was intended to prevent the state update on an unmounted component\n    let isMounted = true;\n    const apiUrl = props.api;\n    async function getData() {\n      try {\n        const response = await fetch(apiUrl + '/games');\n        const json = await response.json();\n        // prevent the setState call if Homepage was unmounted\n        if (isMounted) {\n          setGames(json);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    getData();\n    // cleanup function to mark Homepage as unmounted\n    return () => {\n      isMounted = false;\n    };\n  }, [props.api]);\n  const classes = useStyles();\n\n  let list = (\n    <Typography component=\"p\" variant=\"h2\">\n      Loading..\n    </Typography>\n  );\n  if (games) {\n    list = games.map(game => (\n      <Button\n        key={game}\n        className={classes.margin}\n        onClick={() => {\n          props.setScreen('select');\n          props.setSelected({ ...props.selected, game: game });\n        }}\n      >\n        Start\n      </Button>\n    ));\n    if (props.selected.sections.length && props.selected.types.length) {\n      list.push(\n        <Button\n          key={'displayStored'}\n          className={classes.margin}\n          onClick={() => {\n            props.setScreen('main');\n          }}\n        >\n          Resume\n        </Button>\n      );\n    }\n  }\n\n  return (\n    <>\n      <Grid\n        container\n        component=\"main\"\n        alignItems=\"stretch\"\n        className={classes.root}\n      >\n        <Grid\n          container\n          direction=\"column\"\n          item\n          xs={12}\n          sm={7}\n          component={Paper}\n          square\n          className={classes.grayWall}\n        >\n          <Typography component=\"h1\" variant=\"h3\">\n            The Last of Us\n          </Typography>\n          <Typography component=\"h2\" variant=\"h5\">\n            Collectible App\n          </Typography>\n        </Grid>\n        <Grid\n          container\n          direction=\"column\"\n          item\n          xs={12}\n          sm={5}\n          className={classes.wall}\n        >\n          <Box></Box>\n          <Box>{list}</Box>\n          <Box className={classes.margin}>{props.credits}</Box>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Homepage;\n","import {\n  Box,\n  Button,\n  Card as Mcard,\n  CardContent,\n  CardHeader,\n  Checkbox,\n  Collapse,\n  Divider,\n  Drawer,\n  Fab,\n  Grid,\n  Hidden,\n  IconButton,\n  List,\n  ListItem,\n  ListItemText,\n  makeStyles,\n  Paper,\n  Typography,\n} from '@material-ui/core';\nimport { MenuRounded } from '@material-ui/icons';\nimport React, { useState, useEffect } from 'react';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: '100vh',\n  },\n  fab: {\n    position: 'fixed',\n    color: theme.palette.primary.dark,\n    backgroundColor: theme.palette.grey[900],\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n  bottomDrawer: {\n    width: 'auto',\n  },\n  wall: {\n    backgroundColor: theme.palette.background.default,\n    justifyContent: 'flex-start',\n  },\n  fixed: {\n    position: 'fixed',\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    paddingInline: theme.spacing(3),\n  },\n  credits: { paddingBlock: theme.spacing(3) },\n  grayWall: {\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n    alignItems: 'flex-start',\n  },\n  margin: {\n    marginTop: theme.spacing(2),\n  },\n  card: {\n    marginBlockStart: theme.spacing(1),\n    width: '100%',\n  },\n  sectionHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-start',\n    paddingBlock: theme.spacing(2),\n    paddingInline: theme.spacing(1),\n    marginBlockStart: theme.spacing(1),\n    width: '100%',\n  },\n}));\n\n// card for the individual item\nfunction Card(props) {\n  const classes = useStyles();\n  const collectedState = props.collected.includes(props.item._id);\n  // function to mark collected\n  const check = () => {\n    if (collectedState) {\n      props.setCollected(\n        props.collected.filter(entry => entry !== props.item._id)\n      );\n    } else {\n      props.setCollected(props.collected.concat(props.item._id));\n    }\n  };\n  // 'collected' button goes here\n  return (\n    <Mcard className={classes.card}>\n      <CardHeader\n        title={props.item.name || props.item.type}\n        subheader={props.item.name ? props.item.type : ''}\n        titleTypographyProps={{\n          variant: 'h6',\n          color: collectedState ? 'textSecondary' : 'textPrimary',\n        }}\n        action={\n          <IconButton>\n            <Checkbox\n              color=\"primary\"\n              checked={collectedState}\n              disableRipple\n              tabIndex={-1}\n            />\n          </IconButton>\n        }\n        onClick={() => check()}\n      />\n      <Collapse in={!collectedState} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          <Typography>{props.item.description}</Typography>\n        </CardContent>\n      </Collapse>\n    </Mcard>\n  );\n}\n\n// the list of items by section\nfunction Display(props) {\n  const [arts, setArts] = useState([]);\n  const [drawerOpen, setDrawer] = useState(false);\n  // 'collected' state lives here\n  const [collected, setCollected] = useState([]);\n  const apiUrl = props.api;\n\n  const classes = useStyles();\n\n  // 'collected' is loaded from the storage\n  useEffect(() => {\n    const savedCollected = localStorage.getItem('collected');\n    if (savedCollected) {\n      setCollected(JSON.parse(savedCollected));\n    } else {\n      setCollected([]);\n    }\n  }, []);\n\n  // 'collected' is saved to the storage\n  useEffect(() => {\n    localStorage.setItem('collected', JSON.stringify(collected));\n  }, [collected]);\n\n  useEffect(() => {\n    async function getArticles() {\n      try {\n        const response = await fetch(apiUrl + '/display', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(props.selected),\n        });\n        const json = await response.json();\n        setArts(json);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    getArticles();\n  }, [apiUrl, props.selected]);\n\n  // function to reset collected for displayed items\n  const resetCollected = () => {\n    const idArr = arts.flatMap(section =>\n      section.articles.map(article => article._id)\n    );\n    setCollected(collected.filter(id => !idArr.includes(id)));\n  };\n\n  // function to set selected to the next section\n  const setNextSection = async () => {\n    try {\n      const res = await fetch(apiUrl + '/next', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(arts[arts.length - 1]),\n      });\n      const json = await res.json();\n      setArts([]);\n      props.setSelected({ ...props.selected, sections: [json._id] });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  let list = 'Loading..';\n  // once fetched, render the items as a list\n  if (arts) {\n    list = [];\n    // each section has a header\n    for (const section of arts) {\n      list.push(\n        <Box className={classes.sectionHeader} key={section._id}>\n          <Typography component=\"h2\" variant=\"h6\">\n            {section.chapter} - {section.name}\n          </Typography>\n        </Box>\n      );\n      // if there is nothing to display\n      if (!section.articles.length) {\n        list.push(\n          <Box className={classes.sectionHeader} key={section.name}>\n            <Typography component=\"p\" variant=\"subtitle1\">\n              No items to display\n            </Typography>\n          </Box>\n        );\n      }\n      // otherwise display items\n      for (const article of section.articles) {\n        list.push(\n          <Card\n            item={article}\n            key={article._id}\n            collected={collected}\n            setCollected={setCollected}\n          />\n        );\n      }\n    }\n    list.push(\n      <Button\n        key={'next'}\n        className={classes.margin}\n        color=\"default\"\n        onClick={() => setNextSection()}\n      >\n        Next Section\n      </Button>\n    );\n  }\n  return (\n    <Grid\n      container\n      component=\"main\"\n      alignItems=\"stretch\"\n      className={classes.root}\n    >\n      <Grid\n        container\n        item\n        xs={12}\n        sm={8}\n        md={9}\n        component={Paper}\n        square\n        className={classes.grayWall}\n        direction=\"column\"\n      >\n        {list}\n      </Grid>\n      <Hidden xsDown>\n        <Grid\n          container\n          direction=\"column\"\n          item\n          sm={4}\n          md={3}\n          className={classes.wall}\n        >\n          <Box className={classes.fixed}>\n            <Box></Box>\n            <Box>\n              <Button\n                className={classes.margin}\n                onClick={() => props.setScreen('home')}\n              >\n                Main Menu\n              </Button>\n              <Button\n                className={classes.margin}\n                onClick={() => props.setScreen('select')}\n              >\n                Game Menu\n              </Button>\n              <Button\n                className={classes.margin}\n                onClick={() => resetCollected()}\n              >\n                Reset Collected\n              </Button>\n            </Box>\n            <Box className={classes.credits}>{props.credits}</Box>\n          </Box>\n        </Grid>\n      </Hidden>\n      <Hidden smUp implementation=\"css\">\n        <Fab className={classes.fab} onClick={() => setDrawer(true)}>\n          <MenuRounded fontSize=\"large\" />\n        </Fab>\n        <Drawer\n          anchor=\"bottom\"\n          open={drawerOpen}\n          onClose={() => setDrawer(false)}\n        >\n          <List className={classes.bottomDrawer}>\n            <ListItem button onClick={() => props.setScreen('home')}>\n              <ListItemText primary=\"Main Menu\" />\n            </ListItem>\n            <ListItem button onClick={() => props.setScreen('select')}>\n              <ListItemText primary=\"Game Menu\" />\n            </ListItem>\n            <Divider />\n            <ListItem\n              button\n              onClick={() => {\n                resetCollected();\n                setDrawer(false);\n              }}\n            >\n              <ListItemText primary=\"Reset Displayed Collected\" />\n            </ListItem>\n          </List>\n        </Drawer>\n      </Hidden>\n    </Grid>\n  );\n}\n\nexport default Display;\n","import React, { useState, useEffect } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport List from './List.js';\nimport Homepage from './Homepage.js';\nimport Display from './Display.js';\nimport {\n  createMuiTheme,\n  Link,\n  ThemeProvider,\n  Typography,\n} from '@material-ui/core';\nimport { amber } from '@material-ui/core/colors';\n\nfunction App() {\n  const [screen, setScreen] = useState('home');\n  const [selected, setSelected] = useState({\n    game: '',\n    sections: [],\n    types: [],\n  });\n  // TODO set for the actual backend\n  const apiUrl = 'https://calm-headland-01615.herokuapp.com/api';\n\n  const darkTheme = createMuiTheme({\n    palette: { type: 'dark', primary: amber },\n    props: {\n      MuiGrid: {\n        alignItems: 'center',\n        justify: 'center',\n      },\n      MuiButton: {\n        variant: 'outlined',\n        size: 'large',\n        fullWidth: true,\n        disableElevation: true,\n        color: 'primary',\n      },\n    },\n  });\n\n  // load the state from localStorage\n  useEffect(() => {\n    const savedSelected = localStorage.getItem('selected');\n    if (savedSelected) {\n      setSelected(JSON.parse(savedSelected));\n    }\n  }, []);\n  // save the state to localStorage when the values change\n  useEffect(() => {\n    localStorage.setItem('selected', JSON.stringify(selected));\n  }, [screen, selected]);\n  const credits = (\n    <Typography\n      component=\"p\"\n      variant=\"subtitle2\"\n      color=\"textSecondary\"\n      align=\"center\"\n    >\n      by{' '}\n      <Link\n        color=\"textSecondary\"\n        underline=\"always\"\n        href=\"https://github.com/milesAwayAlex\"\n      >\n        @milesAwayAlex\n      </Link>\n    </Typography>\n  );\n\n  let view = <Typography component=\"h1\"> Loading..</Typography>;\n  // only render the Homepage if the effects have finished running\n  if (screen === 'home') {\n    view = (\n      <Homepage\n        setScreen={setScreen}\n        selected={selected}\n        setSelected={setSelected}\n        api={apiUrl}\n        credits={credits}\n      />\n    );\n  } else if (screen === 'select') {\n    view = (\n      <List\n        setScreen={setScreen}\n        selected={selected}\n        setSelected={setSelected}\n        api={apiUrl}\n        credits={credits}\n      />\n    );\n  } else if (screen === 'main') {\n    view = (\n      <Display\n        setScreen={setScreen}\n        selected={selected}\n        setSelected={setSelected}\n        api={apiUrl}\n        credits={credits}\n      />\n    );\n  }\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={darkTheme}>{view}</ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fontsource/roboto';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}